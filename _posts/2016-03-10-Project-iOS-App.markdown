---
layout: post
title:  "Project: iOS App"
date:   2016-03-10 10:43:32 -0800
categories: school-project
---
For my SOS project, I decided to build an iOS application using the Xcode IDE and the programing language Swift 2. ![VIP.aersia.net](/assets/vip_0.jpg)The application that I build is a music player/radio app that plays music from the popular web app, [Aersia VIP](http://vip.aersia.net/vip.swf). When this app is finished, it will emulate the features and design of the original web app AND will add a few new features like multiple playlist support.## What is Aersia?![VIP.aersia.net](/assets/vip_1.png)This web app plays a [curated collection of popular and unique video game music.](http://vip.aersia.net/vip.swf "Aersia VIP" ) It's creator, who goes by the name Cats777, updates this playlist every couple of months with new music. He also curates other playlists that I would eventually like to include in my app. Because this web app runs on Flash Player, its website is not compatible with mobile devices like iOS and Android. Since I listen to music on my iPad most of the time, I thought that this would be a useful and fun app to build, at least for me.You can read more about the playlist [here](http://www.aersia.net/threads/vip-and-wap-faqs.8/)### What will this app do?The "Aersia VIP Player" end goal is to create and app that emulates the functionality of the Flash web app. That includes.- Playing tracks randomly with the ability to choose a specific track.- Automatically updates track library when new songs are added to the web app.- Playing in the background process so users can multi-task.- Emulate the look and feel of the original app (colors, layout, track list auto scrolling to next track)Also would like to bring new features that are not in the web app, including- Access to other playlists on Aersia.com. (can't select different playlists on web app)- Ability to favorite a track so it plays more obtain when listening on shuffle.The web app uses .xml to organize and update the track list. You can [view this page here.](http://vip.aersia.net/roster.xml) The final iOS app will use this URL to load new tracks.### Why an iOS app?1. Flash player does not run on iOS so the original web app is unusable. Others have made HTML5 versions but they don't run well in the background on the iOS web browser.2. I've always been interested in iOS development and wanted to work on my own project that I was already interested in.3. Someone else already made an Android version. Why can't I make an iOS app?## Current Progress (as of March 2016)![](/assets/vip_3.png)I have completed the first build of the app; Ill be referring to it as an alpha build since it is not yet feature complete. The alpha build is running stable on an iPhone simulator and on actual hardware (iPad 4th Gen). Below is a quick video demo.

<iframe width="533" height="280" src="https://www.youtube.com/embed/Sf1s73AgPLc" frameborder="0" allowfullscreen></iframe>The app is being written in Swift 2, Apple's new programing language for most of their products. It's similar to Python and Haskell, two languages that we have used extensively in class so Swift want not as daunting as I thought it could be.Audio playback is currently using the built-in [AVPlayer](https://developer.apple.com/library/ios/documentation/AVFoundation/Reference/AVPlayer_Class/) class thats part of the AV Foundation framework for iOS. This class is not the standard way to play Audio in Swift; Usually [AVAudioPlayer](https://developer.apple.com/library/ios/documentation/AVFoundation/Reference/AVAudioPlayerClassReference/) is used. AVAudioPlayer has one flaw for this project is it does not support streaming audio files from a remote server; only from a local file or memory. Because of this, the alpha is currently using the limited APIs from AVPlayer with is usually used for video streaming. (will elaborate more in Current Limitations.)UI is mostly build in StoryBoard. This is how the UI was build to emulate the look of the original web app. UI elements are properly constrained so that the UI will look consistent with different screen sizes (iPhones 4 inch, 4.7 inch, 5.5 inch along with the iPad's 4:3 aspect ratio screens)### Current Limitations- AVPlayer Limitations: The current framework for streaming tracks does not have many useful functions for audio playback. While I have researched how to build solutions to many problems I have below, A better implementation would probably be to download the audio track outside of an Audio Framework and instead to memory. This way, the feature rich AVAudioPlayer Framework can be used. (will give easy access to queuing tracks, track duration that AVPlayer lacks)- Progress bar does not work. The current way audio is being processes does not let the user easy access to the total track length, only current track length can be read. I have found ways to implement this with AVPlayer but it should be an easy fix if I can get AVAudioPlayer working.- The alpha can't play a track when the previous track finishes. This is another limitation to using AVPlayer and should be fixed with the new audio player.- No background playback. Again, should be fixable with new audio player.![](/assets/vip_4.png)### Features to Implement- XML Parsing. Currently, audio tracks are being stores in arrays for testing purposes.  (example below) The array is a quick solution to test different Audio Player Frameworks. Once I figure out the proper way to play audio in Swift, I will most likely use the build in [NSXMLParser](https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSXMLParser_Class/#//apple_ref/occ/instp/NSXMLParser/columnNumber) Class to more early and automatically access the track list. This would also allow the alpha to be updated with new tracks when the Flash web app is updated.{% highlight swift %}var songsURL = [["Donkey Kong Country - Fear Factory 2000","http://vip.aersia.net/mu/dkc-crimzonwolf777-fearfactory2009.m4a"],    ["Fez - Majesty", "http://vip.aersia.net/mu/fez-majesty.m4a"],    ["Mighty Switch Force 2 - Title", "http://vip.aersia.net/mu/msf2-title.m4a"],    ["NiGHTS Into Dreams - Dreams, Dreams (Adult Version)", "http://vip.aersia.net/mu/nights-dreamsdreams(adult).m4a"],    ["Shovel Knight - Strike The Earth", "http://vip.aersia.net/mu/shovelknight-striketheearth.m4a"]]    // This array would be over 2000 items long. Does not look pretty like .xml does{% endhighlight %}- Stared tracks will be implemented after .xml parsing is done. This will let the playback randomizer know to play these tracks more obtain. Will be implemented in UI by swiping the track name to the left.- The web app automatically scrolls to the playing song when a new random song starts playing. This is how the web app tells the user what song is playing and I would like to replicate that instead of just having a text box that links to the current song title.## Final ThoughtsAfter around 100 hours of work, I went from no experience with IDEs, Swift, and user interface design, to compiling an app that runs on actual hardware. While I wont be continuing the program at school, (I graduate this quarter) I know what the problems and potential solutions are. (Especially after writing about it for a couple hours.) Hopefully I don't have as much problems fixing and finishing this application.